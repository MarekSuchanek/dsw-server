sudo: false

language: generic

services:
  - mongodb
  - rabbitmq

stages:
  - build
  - tag

env:
  - PRIVATE_IMAGE="mareksuchanek/dsw-server-private" IMAGE="mareksuchanek/dsw-server-public" IMAGE_TAG="$PRIVATE_IMAGE:$TRAVIS_COMMIT" IMAGE_TAG_DEVELOP="$IMAGE:develop" IMAGE_TAG_LATEST="$IMAGE:latest"

cache:
  directories:
  - $HOME/.stack
  - $HOME/.stack-work
  - .stack-work

install:
  # 1. Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - export PATH=$HOME/.local/bin:$PATH
  - travis_retry curl -L https://github.com/commercialhaskell/stack/releases/download/v1.9.3/stack-1.9.3-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  # 2. Configure stack to use the system GHC installation
  - stack config set system-ghc --global true
  - export PATH=/opt/ghc/ghc-8.6.4/bin:$PATH
  # 3. Init Application Config
  - cp config/app-config.cfg.example config/app-config.cfg
  - cp config/app-config-test.cfg.example config/app-config-test.cfg
  # 4. Analysis
  - which stack
  - pwd

before_script:
  # 1. Log to both public and our private Docker Registry
  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
#  - docker login -u "$REGISTRY_USERNAME" -p "$REGISTRY_PASSWORD" "$REGISTRY"

jobs:
  include:
    - stage: build
      script:
        # 1. Init testing Mongo Database
        - mongo dsw-server-test --eval 'db.collection.find()'
        # 2. Create build info inside application
        - cd scripts
        - ./build-info.sh
        - cd ..
        # 3. Build and Test Application
        - stack --no-terminal --skip-ghc-check test
        # 4. Build Docker Image
        - docker pull $IMAGE_TAG_LATEST || true
        - docker build --pull --cache-from $IMAGE_TAG_LATEST -t $IMAGE_TAG .
        - docker push $IMAGE_TAG

    - stage: tag
      if: (branch = develop) AND (NOT (type IN (pull_request)))
      before_install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_DEVELOP
        - docker push $IMAGE_TAG_DEVELOP

    - stage: tag
      if: (branch = master) AND (NOT (type IN (pull_request)))
      before_install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_LATEST
        - docker push $IMAGE_TAG_LATEST

    - stage: tag
      if: tag =~ ^v
      before_install: false
      env:
        - PRIVATE_IMAGE="MarekSuchanek/dsw-server-private"
        - IMAGE="MarekSuchanek/dsw-server-public"
        - IMAGE_TAG="$PRIVATE_IMAGE:$TRAVIS_COMMIT"
        - IMAGE_TAG_MAJOR="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
        - IMAGE_TAG_MINOR="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v(.*)\..*/\1/g"`
        - IMAGE_TAG_PATCH="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v//g"`
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_MAJOR
        - docker push $IMAGE_TAG_MAJOR
        - docker image tag $IMAGE_TAG $IMAGE_TAG_MINOR
        - docker push $IMAGE_TAG_MINOR
        - docker image tag $IMAGE_TAG $IMAGE_TAG_PATCH
        - docker push $IMAGE_TAG_PATCH
